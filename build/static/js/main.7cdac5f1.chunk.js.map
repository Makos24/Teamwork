{"version":3,"sources":["service.js","components/Login.js","components/Logout.js","App.js","serviceWorker.js","index.js"],"names":["PostData","type","userData","Promise","resolve","reject","fetch","method","body","JSON","stringify","mode","headers","then","response","json","res","catch","error","PostDataAuth","bearer","store","get","token","Authorization","getData","Login","props","state","email","password","login","bind","onChange","this","result","responseJson","status","set","data","role","history","push","alert","e","setState","target","name","value","to","className","placeholder","id","htmlFor","onClick","React","Component","Users","lazy","Feed","App","logout","remove","logoutBtn","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cdac5f1.chunk.js","sourcesContent":["import store from \"store\";\r\n\r\nexport function PostData(type, userData) {\r\n  let BaseURL = \"https://api-dvc-teamwork.herokuapp.com/api/v1\";\r\n  //let BaseURL = 'http://localhost/PHP-Slim-Restful/api/';\r\n  return new Promise((resolve, reject) => {\r\n    fetch(BaseURL + type, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(userData),\r\n      mode: \"cors\",\r\n      headers: { \"Content-Type\": \"application/json\" }\r\n    })\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        resolve(res);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function PostDataAuth(type, userData) {\r\n  let BaseURL = \"https://api-dvc-teamwork.herokuapp.com/api/v1\";\r\n  const bearer = store.get(\"twk-userData\")\r\n    ? \"Bearer \" + store.get(\"twk-userData\").token\r\n    : \"\";\r\n  return new Promise((resolve, reject) => {\r\n    fetch(BaseURL + type, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(userData),\r\n      mode: \"cors\",\r\n      headers: {\r\n        Authorization: bearer,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        resolve(res);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function getData(type) {\r\n  let BaseURL = \"https://api-dvc-teamwork.herokuapp.com/api/v1\";\r\n  const bearer = store.get(\"twk-userData\")\r\n    ? \"Bearer \" + store.get(\"twk-userData\").token\r\n    : \"\";\r\n  //let BaseURL = 'http://localhost/PHP-Slim-Restful/api/';\r\n  return new Promise((resolve, reject) => {\r\n    fetch(BaseURL + type, {\r\n      method: \"GET\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        Authorization: bearer,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        resolve(res);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../App.css\";\r\nimport { PostData } from \"../service\";\r\nimport store from \"store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\"\r\n      // redirectToReferrer: false\r\n    };\r\n    this.login = this.login.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n  login() {\r\n    if (this.state.email && this.state.password) {\r\n      PostData(\"/auth/signin\", this.state).then(result => {\r\n        let responseJson = result;\r\n        if (responseJson.status === \"success\") {\r\n          store.set(\"twk-userData\", responseJson.data);\r\n          if (responseJson.data.role === 1) {\r\n            this.props.history.push(\"/users\");\r\n          } else {\r\n            this.props.history.push(\"/feed\");\r\n          }\r\n          //   this.setState({ redirectToReferrer: true });\r\n        } else {\r\n          alert(responseJson.error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  render() {\r\n    if (store.get(\"twk-userData\") && store.get(\"twk-userData\").role === 1) {\r\n      return <Redirect to=\"/users\" />;\r\n    } else if (\r\n      store.get(\"twk-userData\") &&\r\n      store.get(\"twk-userData\").role === 2\r\n    ) {\r\n      return <Redirect to=\"/feed\" />;\r\n    }\r\n    return (\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <h3>Sign In</h3>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Email address</label>\r\n            <input\r\n              name=\"email\"\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter email\"\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Password</label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter password\"\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <div className=\"custom-control custom-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"customCheck1\"\r\n              />\r\n              <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                Remember me\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Login\"\r\n            onClick={this.login}\r\n            className=\"btn btn-primary btn-block\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport store from \"store\";\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n  logout() {\r\n    store.remove(\"twk-userData\");\r\n    this.props.history.push(\"/login\");\r\n  }\r\n\r\n  render() {\r\n    if (store.get(\"twk-userData\")) {\r\n      return (\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Logout\"\r\n          onClick={this.logout}\r\n          className=\"btn btn-danger\"\r\n        />\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Suspense, lazy } from \"react\";\nimport store from \"store\";\nimport \"./App.css\";\nimport Login from \"./components/Login\";\nimport Logout from \"./components/Logout\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nconst Users = lazy(() => import(\"./components/admin/Users\"));\nconst Feed = lazy(() => import(\"./components/employee/Feed\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.logout = this.logout.bind(this);\n  }\n  logout() {\n    store.remove(\"twk-userData\");\n    return <Redirect to=\"/login\" />;\n  }\n  render() {\n    let logoutBtn;\n    if (store.get(\"twk-userData\")) {\n      logoutBtn = (\n        <input\n          type=\"submit\"\n          value=\"Logout\"\n          onClick={this.logout}\n          className=\"btn btn-danger\"\n        />\n      );\n    }\n    return (\n      <div className=\"App\">\n        <Router>\n          <Suspense fallback={<div>Loading...</div>}>\n            <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n              <div className=\"container\">\n                <Link to=\"/\">\n                  <div className=\"navbar-brand\">TeamWork</div>\n                </Link>\n\n                <div\n                  className=\"collapse navbar-collapse\"\n                  id=\"navbarTogglerDemo02\"\n                >\n                  <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">{logoutBtn}</li>\n                  </ul>\n                </div>\n              </div>\n            </nav>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route path=\"/login\" component={Login} />\n              <Route exact path=\"/users\" component={Users} />\n              <Route exact path=\"/feed\" component={Feed} />\n            </Switch>\n          </Suspense>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}